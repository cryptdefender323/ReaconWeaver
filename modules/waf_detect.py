from aiohttp import ClientSession, ClientTimeout, TCPConnector
import asyncio
import logging
from typing import Dict, List, Optional
from dataclasses import dataclass, field
import time

@dataclass
class WAFResult:
    detected: bool
    waf_name: Optional[str] = None
    confidence: float = 0.0
    evidence: List[str] = field(default_factory=list)
    response_behavior: Dict = field(default_factory=dict)

class AdvancedWAFDetector:
    def __init__(self, target: str, timeout: int = 10):
        self.target = target.rstrip('/')
        self.timeout = timeout
        self.logger = self._setup_logger()
        
        self.waf_signatures = {
            'Cloudflare': {
                'headers': ['cf-ray', 'cf-cache-status', '__cfduid'],
                'cookies': ['__cfduid', '__cflb'],
                'body_patterns': [b'cloudflare', b'cf-error-details'],
                'status_codes': [403, 429, 503]
            },
            'AWS WAF': {
                'headers': ['x-amzn-requestid', 'x-amz-cf-id'],
                'body_patterns': [b'access denied', b'aws'],
                'status_codes': [403]
            },
            'Imperva': {
                'headers': ['x-cdn', 'x-iinfo'],
                'cookies': ['incap_ses', 'visid_incap'],
                'body_patterns': [b'incapsula', b'imperva'],
                'status_codes': [403]
            },
            'Akamai': {
                'headers': ['x-akamai-transformed', 'akamai-origin-hop'],
                'body_patterns': [b'akamai'],
                'status_codes': [403]
            },
            'Sucuri': {
                'headers': ['x-sucuri-id', 'x-sucuri-cache'],
                'body_patterns': [b'sucuri', b'cloudproxy'],
                'status_codes': [403]
            },
            'ModSecurity': {
                'headers': ['x-mod-security'],
                'body_patterns': [b'mod_security', b'modsecurity'],
                'status_codes': [403, 406]
            },
            'F5 BIG-IP': {
                'cookies': ['TS01', 'BigIPServer'],
                'body_patterns': [b'bigip', b'f5'],
                'status_codes': [403]
            },
            'Barracuda': {
                'cookies': ['barra_counter_session'],
                'body_patterns': [b'barracuda'],
                'status_codes': [403]
            },
            'Wordfence': {
                'body_patterns': [b'wordfence', b'generated by wordfence'],
                'status_codes': [403, 503]
            }
        }
        
        self.test_payloads = {
            'sql_injection': ["' OR '1'='1", "1' UNION SELECT NULL--"],
            'xss': ["<script>alert('XSS')</script>", "<img src=x onerror=alert(1)>"],
            'command_injection': ["; ls -la", "| cat /etc/passwd"],
            'path_traversal': ["../../../etc/passwd"]
        }
    
    def _setup_logger(self) -> logging.Logger:
        logger = logging.getLogger('WAFDetector')
        logger.setLevel(logging.INFO)
        if not logger.handlers:
            handler = logging.StreamHandler()
            formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
            handler.setFormatter(formatter)
            logger.addHandler(handler)
        return logger
    
    async def _fingerprint_waf_passive(self, session: ClientSession) -> Dict:
        evidence = []
        detected_wafs = []
        
        try:
            async with session.get(self.target, ssl=False) as response:
                headers = dict(response.headers)
                body = await response.read()
                status = response.status
                
                for waf_name, signatures in self.waf_signatures.items():
                    confidence = 0.0
                    local_evidence = []
                    
                    for header_sig in signatures.get('headers', []):
                        for header_key in headers.keys():
                            if header_sig.lower() in header_key.lower():
                                confidence += 0.3
                                local_evidence.append(f"Header: {header_key}")
                    
                    cookies = headers.get('Set-Cookie', '')
                    for cookie_sig in signatures.get('cookies', []):
                        if cookie_sig.lower() in cookies.lower():
                            confidence += 0.3
                            local_evidence.append(f"Cookie: {cookie_sig}")
                    
                    for pattern in signatures.get('body_patterns', []):
                        if pattern.lower() in body.lower():
                            confidence += 0.2
                            local_evidence.append(f"Body pattern: {pattern.decode()}")
                    
                    if confidence > 0.3:
                        detected_wafs.append({
                            'name': waf_name,
                            'confidence': min(confidence, 1.0),
                            'evidence': local_evidence
                        })
                
                return {
                    'detected_wafs': detected_wafs,
                    'headers': headers,
                    'status': status,
                    'body_size': len(body)
                }
                
        except Exception as e:
            self.logger.error(f"Passive detection error: {str(e)}")
            return {'detected_wafs': [], 'error': str(e)}
    
    async def _test_waf_active(self, session: ClientSession) -> Dict:
        baseline = None
        anomalies = []
        
        try:
            async with session.get(self.target, ssl=False) as response:
                baseline = {
                    'status': response.status,
                    'body_size': len(await response.read()),
                    'headers': dict(response.headers)
                }
            
            for category, payloads in self.test_payloads.items():
                for payload in payloads[:2]:
                    try:
                        test_url = f"{self.target}?test={payload}"
                        async with session.get(test_url, ssl=False) as response:
                            status = response.status
                            body = await response.read()
                            
                            if status != baseline['status']:
                                anomalies.append({
                                    'payload': payload,
                                    'category': category,
                                    'status_change': f"{baseline['status']} -> {status}",
                                    'blocked': status in [403, 406, 429, 503]
                                })
                            
                            if status in [403, 406]:
                                for waf_name, sigs in self.waf_signatures.items():
                                    for pattern in sigs.get('body_patterns', []):
                                        if pattern.lower() in body.lower():
                                            anomalies.append({
                                                'payload': payload,
                                                'category': category,
                                                'detected_waf': waf_name,
                                                'status': status
                                            })
                        
                        await asyncio.sleep(0.5)
                        
                    except Exception as e:
                        self.logger.debug(f"Active test error: {str(e)}")
            
            return {
                'baseline': baseline,
                'anomalies': anomalies,
                'waf_detected': len(anomalies) > 0
            }
            
        except Exception as e:
            self.logger.error(f"Active detection error: {str(e)}")
            return {'error': str(e)}
    
    async def detect(self) -> WAFResult:
        self.logger.info(f"Starting WAF detection on {self.target}")
        
        connector = TCPConnector(limit=10, ssl=False)
        timeout = ClientTimeout(total=self.timeout)
        headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'}
        
        async with ClientSession(connector=connector, timeout=timeout, headers=headers) as session:
            self.logger.info("Running passive WAF detection...")
            passive_result = await self._fingerprint_waf_passive(session)
            
            self.logger.info("Running active WAF detection...")
            active_result = await self._test_waf_active(session)
            
            detected = False
            waf_name = None
            confidence = 0.0
            evidence = []
            
            if passive_result.get('detected_wafs'):
                detected = True
                best_match = max(passive_result['detected_wafs'], key=lambda x: x['confidence'])
                waf_name = best_match['name']
                confidence = best_match['confidence']
                evidence.extend(best_match['evidence'])
            
            if active_result.get('waf_detected'):
                detected = True
                if not waf_name:
                    waf_name = "Unknown WAF"
                    confidence = 0.5
                evidence.append(f"Blocked {len(active_result['anomalies'])} malicious payloads")
                
                for anomaly in active_result['anomalies']:
                    if 'detected_waf' in anomaly:
                        waf_name = anomaly['detected_waf']
                        confidence = max(confidence, 0.8)
                        break
            
            result = WAFResult(
                detected=detected,
                waf_name=waf_name,
                confidence=confidence,
                evidence=evidence,
                response_behavior={
                    'passive': passive_result,
                    'active': active_result
                }
            )
            
            if result.detected:
                self.logger.info(f"WAF Detected: {result.waf_name} (Confidence: {result.confidence:.2f})")
                self.logger.info(f"Evidence: {', '.join(result.evidence)}")
            else:
                self.logger.info("No WAF detected")
            
            return result

async def run(target: str, progress_manager):
    detector = AdvancedWAFDetector(target=target, timeout=10)
    result = await detector.detect()
    
    timestamp = time.strftime('%Y%m%d_%H%M%S')
    from urllib.parse import urlparse
    output_dir = f"results/{urlparse(target).netloc}"
    
    import os
    os.makedirs(output_dir, exist_ok=True)
    
    import json
    with open(f"{output_dir}/waf_detection_{timestamp}.json", 'w') as f:
        json.dump({
            'target': target,
            'detected': result.detected,
            'waf_name': result.waf_name,
            'confidence': result.confidence,
            'evidence': result.evidence,
            'scan_date': time.strftime('%Y-%m-%d %H:%M:%S')
        }, f, indent=2)
    
    return result